// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// App defines model for App.
type App struct {
	CreatedAt   time.Time          `json:"createdAt"`
	Description *string            `json:"description,omitempty"`
	Id          openapi_types.UUID `json:"id"`
	Name        string             `json:"name"`
	Slug        string             `json:"slug"`
	UpdatedAt   time.Time          `json:"updatedAt"`
}

// Deployment defines model for Deployment.
type Deployment struct {
	AppId     openapi_types.UUID `json:"appId"`
	CreatedAt time.Time          `json:"createdAt"`
	Id        openapi_types.UUID `json:"id"`
	Status    string             `json:"status"`
	UpdatedAt time.Time          `json:"updatedAt"`
	VersionId openapi_types.UUID `json:"versionId"`
}

// Environment defines model for Environment.
type Environment struct {
	CreatedAt time.Time          `json:"createdAt"`
	Id        openapi_types.UUID `json:"id"`
	Name      string             `json:"name"`
	Slug      string             `json:"slug"`
	UpdatedAt time.Time          `json:"updatedAt"`
}

// EnvironmentComposeFile defines model for EnvironmentComposeFile.
type EnvironmentComposeFile struct {
	Compose       map[string]interface{} `json:"compose"`
	CreatedAt     time.Time              `json:"createdAt"`
	EnvironmentId openapi_types.UUID     `json:"environmentId"`
	Id            openapi_types.UUID     `json:"id"`
	RawCompose    string                 `json:"rawCompose"`
	UpdatedAt     time.Time              `json:"updatedAt"`
	Version       string                 `json:"version"`
}

// Organization defines model for Organization.
type Organization struct {
	CreatedAt        time.Time               `json:"createdAt"`
	Id               openapi_types.UUID      `json:"id"`
	Logo             *string                 `json:"logo,omitempty"`
	Metadata         *map[string]interface{} `json:"metadata,omitempty"`
	Name             string                  `json:"name"`
	Slug             string                  `json:"slug"`
	StripeCustomerId *string                 `json:"stripeCustomerId,omitempty"`
}

// Target defines model for Target.
type Target struct {
	CreatedAt   time.Time          `json:"createdAt"`
	Description *string            `json:"description,omitempty"`
	Id          openapi_types.UUID `json:"id"`
	Name        string             `json:"name"`
	Slug        string             `json:"slug"`
	UpdatedAt   time.Time          `json:"updatedAt"`
}

// ZodError defines model for ZodError.
type ZodError struct {
	Errors []struct {
		Code    string   `json:"code"`
		Message string   `json:"message"`
		Path    []string `json:"path"`
	} `json:"errors"`
}

// CreateOrUpdateAppJSONBody defines parameters for CreateOrUpdateApp.
type CreateOrUpdateAppJSONBody struct {
	// Description Application description
	Description *string `json:"description,omitempty"`

	// Name Application name
	Name *string `json:"name,omitempty"`
}

// CreateOrUpdateEnvironmentJSONBody defines parameters for CreateOrUpdateEnvironment.
type CreateOrUpdateEnvironmentJSONBody struct {
	// Name Environment name
	Name *string `json:"name,omitempty"`
}

// CreateEnvironmentComposeFileJSONBody defines parameters for CreateEnvironmentComposeFile.
type CreateEnvironmentComposeFileJSONBody struct {
	// ComposeNoramlized Docker compose configuration as JSON object
	ComposeNoramlized *map[string]interface{} `json:"composeNoramlized,omitempty"`

	// ComposeRaw Raw compose file content
	ComposeRaw *string `json:"composeRaw,omitempty"`

	// Version Version of the compose file
	Version string `json:"version"`
}

// CreateOrUpdateAppJSONRequestBody defines body for CreateOrUpdateApp for application/json ContentType.
type CreateOrUpdateAppJSONRequestBody CreateOrUpdateAppJSONBody

// CreateOrUpdateEnvironmentJSONRequestBody defines body for CreateOrUpdateEnvironment for application/json ContentType.
type CreateOrUpdateEnvironmentJSONRequestBody CreateOrUpdateEnvironmentJSONBody

// CreateEnvironmentComposeFileJSONRequestBody defines body for CreateEnvironmentComposeFile for application/json ContentType.
type CreateEnvironmentComposeFileJSONRequestBody CreateEnvironmentComposeFileJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetDeployment request
	GetDeployment(ctx context.Context, deploymentId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeploymentHealth request
	GetDeploymentHealth(ctx context.Context, deploymentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeployEnvironmentComposeFile request
	DeployEnvironmentComposeFile(ctx context.Context, composeFileId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApp request
	GetApp(ctx context.Context, orgSlug string, appSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrUpdateAppWithBody request with any body
	CreateOrUpdateAppWithBody(ctx context.Context, orgSlug string, appSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrUpdateApp(ctx context.Context, orgSlug string, appSlug string, body CreateOrUpdateAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrUpdateEnvironmentWithBody request with any body
	CreateOrUpdateEnvironmentWithBody(ctx context.Context, orgSlug string, appSlug string, envSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrUpdateEnvironment(ctx context.Context, orgSlug string, appSlug string, envSlug string, body CreateOrUpdateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEnvironmentComposeFileWithBody request with any body
	CreateEnvironmentComposeFileWithBody(ctx context.Context, orgSlug string, appSlug string, envSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateEnvironmentComposeFile(ctx context.Context, orgSlug string, appSlug string, envSlug string, body CreateEnvironmentComposeFileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Whoami request
	GetApiV1Whoami(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetDeployment(ctx context.Context, deploymentId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeploymentRequest(c.Server, deploymentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeploymentHealth(ctx context.Context, deploymentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeploymentHealthRequest(c.Server, deploymentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeployEnvironmentComposeFile(ctx context.Context, composeFileId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeployEnvironmentComposeFileRequest(c.Server, composeFileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApp(ctx context.Context, orgSlug string, appSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAppRequest(c.Server, orgSlug, appSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrUpdateAppWithBody(ctx context.Context, orgSlug string, appSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrUpdateAppRequestWithBody(c.Server, orgSlug, appSlug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrUpdateApp(ctx context.Context, orgSlug string, appSlug string, body CreateOrUpdateAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrUpdateAppRequest(c.Server, orgSlug, appSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrUpdateEnvironmentWithBody(ctx context.Context, orgSlug string, appSlug string, envSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrUpdateEnvironmentRequestWithBody(c.Server, orgSlug, appSlug, envSlug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrUpdateEnvironment(ctx context.Context, orgSlug string, appSlug string, envSlug string, body CreateOrUpdateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrUpdateEnvironmentRequest(c.Server, orgSlug, appSlug, envSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEnvironmentComposeFileWithBody(ctx context.Context, orgSlug string, appSlug string, envSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEnvironmentComposeFileRequestWithBody(c.Server, orgSlug, appSlug, envSlug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEnvironmentComposeFile(ctx context.Context, orgSlug string, appSlug string, envSlug string, body CreateEnvironmentComposeFileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEnvironmentComposeFileRequest(c.Server, orgSlug, appSlug, envSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Whoami(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1WhoamiRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetDeploymentRequest generates requests for GetDeployment
func NewGetDeploymentRequest(server string, deploymentId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deploymentId", runtime.ParamLocationPath, deploymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/deployment/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDeploymentHealthRequest generates requests for GetDeploymentHealth
func NewGetDeploymentHealthRequest(server string, deploymentId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deploymentId", runtime.ParamLocationPath, deploymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/deployment/%s/health", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeployEnvironmentComposeFileRequest generates requests for DeployEnvironmentComposeFile
func NewDeployEnvironmentComposeFileRequest(server string, composeFileId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "composeFileId", runtime.ParamLocationPath, composeFileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/environment-compose-files/%s/deploy", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAppRequest generates requests for GetApp
func NewGetAppRequest(server string, orgSlug string, appSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgSlug", runtime.ParamLocationPath, orgSlug)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appSlug", runtime.ParamLocationPath, appSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/organizations/%s/apps/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrUpdateAppRequest calls the generic CreateOrUpdateApp builder with application/json body
func NewCreateOrUpdateAppRequest(server string, orgSlug string, appSlug string, body CreateOrUpdateAppJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrUpdateAppRequestWithBody(server, orgSlug, appSlug, "application/json", bodyReader)
}

// NewCreateOrUpdateAppRequestWithBody generates requests for CreateOrUpdateApp with any type of body
func NewCreateOrUpdateAppRequestWithBody(server string, orgSlug string, appSlug string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgSlug", runtime.ParamLocationPath, orgSlug)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appSlug", runtime.ParamLocationPath, appSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/organizations/%s/apps/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateOrUpdateEnvironmentRequest calls the generic CreateOrUpdateEnvironment builder with application/json body
func NewCreateOrUpdateEnvironmentRequest(server string, orgSlug string, appSlug string, envSlug string, body CreateOrUpdateEnvironmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrUpdateEnvironmentRequestWithBody(server, orgSlug, appSlug, envSlug, "application/json", bodyReader)
}

// NewCreateOrUpdateEnvironmentRequestWithBody generates requests for CreateOrUpdateEnvironment with any type of body
func NewCreateOrUpdateEnvironmentRequestWithBody(server string, orgSlug string, appSlug string, envSlug string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgSlug", runtime.ParamLocationPath, orgSlug)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appSlug", runtime.ParamLocationPath, appSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envSlug", runtime.ParamLocationPath, envSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/organizations/%s/apps/%s/environments/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateEnvironmentComposeFileRequest calls the generic CreateEnvironmentComposeFile builder with application/json body
func NewCreateEnvironmentComposeFileRequest(server string, orgSlug string, appSlug string, envSlug string, body CreateEnvironmentComposeFileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateEnvironmentComposeFileRequestWithBody(server, orgSlug, appSlug, envSlug, "application/json", bodyReader)
}

// NewCreateEnvironmentComposeFileRequestWithBody generates requests for CreateEnvironmentComposeFile with any type of body
func NewCreateEnvironmentComposeFileRequestWithBody(server string, orgSlug string, appSlug string, envSlug string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orgSlug", runtime.ParamLocationPath, orgSlug)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "appSlug", runtime.ParamLocationPath, appSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "envSlug", runtime.ParamLocationPath, envSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/organizations/%s/apps/%s/environments/%s/compose-file", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1WhoamiRequest generates requests for GetApiV1Whoami
func NewGetApiV1WhoamiRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/whoami")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetDeploymentWithResponse request
	GetDeploymentWithResponse(ctx context.Context, deploymentId string, reqEditors ...RequestEditorFn) (*GetDeploymentResponse, error)

	// GetDeploymentHealthWithResponse request
	GetDeploymentHealthWithResponse(ctx context.Context, deploymentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetDeploymentHealthResponse, error)

	// DeployEnvironmentComposeFileWithResponse request
	DeployEnvironmentComposeFileWithResponse(ctx context.Context, composeFileId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeployEnvironmentComposeFileResponse, error)

	// GetAppWithResponse request
	GetAppWithResponse(ctx context.Context, orgSlug string, appSlug string, reqEditors ...RequestEditorFn) (*GetAppResponse, error)

	// CreateOrUpdateAppWithBodyWithResponse request with any body
	CreateOrUpdateAppWithBodyWithResponse(ctx context.Context, orgSlug string, appSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrUpdateAppResponse, error)

	CreateOrUpdateAppWithResponse(ctx context.Context, orgSlug string, appSlug string, body CreateOrUpdateAppJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrUpdateAppResponse, error)

	// CreateOrUpdateEnvironmentWithBodyWithResponse request with any body
	CreateOrUpdateEnvironmentWithBodyWithResponse(ctx context.Context, orgSlug string, appSlug string, envSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrUpdateEnvironmentResponse, error)

	CreateOrUpdateEnvironmentWithResponse(ctx context.Context, orgSlug string, appSlug string, envSlug string, body CreateOrUpdateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrUpdateEnvironmentResponse, error)

	// CreateEnvironmentComposeFileWithBodyWithResponse request with any body
	CreateEnvironmentComposeFileWithBodyWithResponse(ctx context.Context, orgSlug string, appSlug string, envSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvironmentComposeFileResponse, error)

	CreateEnvironmentComposeFileWithResponse(ctx context.Context, orgSlug string, appSlug string, envSlug string, body CreateEnvironmentComposeFileJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEnvironmentComposeFileResponse, error)

	// GetApiV1WhoamiWithResponse request
	GetApiV1WhoamiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1WhoamiResponse, error)
}

type GetDeploymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AppId     openapi_types.UUID `json:"appId"`
		CreatedAt time.Time          `json:"createdAt"`
		Id        openapi_types.UUID `json:"id"`
		Logs      *[]struct {
			Log       string    `json:"log"`
			Stream    string    `json:"stream"`
			Timestamp time.Time `json:"timestamp"`
		} `json:"logs,omitempty"`
		Status    string             `json:"status"`
		UpdatedAt time.Time          `json:"updatedAt"`
		VersionId openapi_types.UUID `json:"versionId"`
	}
	JSON400 *ZodError
	JSON401 *struct {
		Error string `json:"error"`
	}
	JSON404 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r GetDeploymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeploymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeploymentHealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		DeploymentId openapi_types.UUID `json:"deploymentId"`

		// Error Error message if health check failed
		Error  *string `json:"error,omitempty"`
		Health *struct {
			Events *[]struct {
				Count          *float32 `json:"count,omitempty"`
				FirstTimestamp *string  `json:"firstTimestamp,omitempty"`
				InvolvedObject *struct {
					Kind *string `json:"kind,omitempty"`
					Name *string `json:"name,omitempty"`
				} `json:"involvedObject,omitempty"`
				LastTimestamp *string `json:"lastTimestamp,omitempty"`
				Message       *string `json:"message,omitempty"`
				Reason        *string `json:"reason,omitempty"`
				Source        *string `json:"source,omitempty"`
				Type          *string `json:"type,omitempty"`
			} `json:"events,omitempty"`
			Helm *map[string]interface{} `json:"helm,omitempty"`
			Pods *[]struct {
				Age        *string `json:"age,omitempty"`
				Conditions *[]struct {
					LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
					Message            *string `json:"message,omitempty"`
					Reason             *string `json:"reason,omitempty"`
					Status             *string `json:"status,omitempty"`
					Type               *string `json:"type,omitempty"`
				} `json:"conditions,omitempty"`
				ContainerStatuses *[]struct {
					LastState    *map[string]interface{} `json:"lastState,omitempty"`
					Name         *string                 `json:"name,omitempty"`
					Ready        *bool                   `json:"ready,omitempty"`
					RestartCount *float32                `json:"restartCount,omitempty"`
					State        *map[string]interface{} `json:"state,omitempty"`
				} `json:"containerStatuses,omitempty"`
				Ip       *string  `json:"ip,omitempty"`
				Name     *string  `json:"name,omitempty"`
				Node     *string  `json:"node,omitempty"`
				Phase    *string  `json:"phase,omitempty"`
				Ready    *bool    `json:"ready,omitempty"`
				Restarts *float32 `json:"restarts,omitempty"`
			} `json:"pods,omitempty"`
			Resources *struct {
				Deployments *[]struct {
					Available  *float32 `json:"available,omitempty"`
					Conditions *[]struct {
						Message *string `json:"message,omitempty"`
						Reason  *string `json:"reason,omitempty"`
						Status  *string `json:"status,omitempty"`
						Type    *string `json:"type,omitempty"`
					} `json:"conditions,omitempty"`
					Desired *float32 `json:"desired,omitempty"`
					Name    *string  `json:"name,omitempty"`
					Ready   *float32 `json:"ready,omitempty"`
					Updated *float32 `json:"updated,omitempty"`
				} `json:"deployments,omitempty"`
				Ingresses *[]struct {
					Hosts *[]string `json:"hosts,omitempty"`
					Name  *string   `json:"name,omitempty"`
					Ready *bool     `json:"ready,omitempty"`
				} `json:"ingresses,omitempty"`
				Services *[]struct {
					ClusterIP *string `json:"clusterIP,omitempty"`
					Name      *string `json:"name,omitempty"`
					Ports     *[]struct {
						Port     *float32 `json:"port,omitempty"`
						Protocol *string  `json:"protocol,omitempty"`

						// TargetPort Port number or name that containers expose (can be numeric string like '8080' or named port like 'http')
						TargetPort *string `json:"targetPort,omitempty"`
					} `json:"ports,omitempty"`
					Type *string `json:"type,omitempty"`
				} `json:"services,omitempty"`
			} `json:"resources,omitempty"`
		} `json:"health,omitempty"`

		// HealthScore Health score from 0-100
		HealthScore     float32                      `json:"healthScore"`
		LastHealthCheck *time.Time                   `json:"lastHealthCheck,omitempty"`
		Status          GetDeploymentHealth200Status `json:"status"`

		// Summary Human-readable health summary
		Summary         string `json:"summary"`
		Troubleshooting *struct {
			HealthScore   *float32  `json:"healthScore,omitempty"`
			QuickCommands *[]string `json:"quickCommands,omitempty"`
			Suggestions   *[]string `json:"suggestions,omitempty"`
			Summary       *string   `json:"summary,omitempty"`
		} `json:"troubleshooting,omitempty"`
	}
}
type GetDeploymentHealth200Status string

// Status returns HTTPResponse.Status
func (r GetDeploymentHealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeploymentHealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeployEnvironmentComposeFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Deployments []struct {
			// CreatedAt Creation timestamp
			CreatedAt *time.Time `json:"createdAt,omitempty"`

			// EnvironmentComposeFileId The compose file ID
			EnvironmentComposeFileId *openapi_types.UUID `json:"environmentComposeFileId,omitempty"`

			// Id The deployment ID
			Id *openapi_types.UUID `json:"id,omitempty"`

			// Status The deployment status
			Status *string `json:"status,omitempty"`

			// TargetId The target ID
			TargetId *openapi_types.UUID `json:"targetId,omitempty"`

			// UpdatedAt Last update timestamp
			UpdatedAt *time.Time `json:"updatedAt,omitempty"`
		} `json:"deployments"`
	}
	JSON400 *ZodError
	JSON401 *struct {
		Error string `json:"error"`
	}
	JSON404 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r DeployEnvironmentComposeFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeployEnvironmentComposeFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CreatedAt    time.Time `json:"createdAt"`
		Description  *string   `json:"description,omitempty"`
		Environments *[]struct {
			ComposeFiles *[]EnvironmentComposeFile `json:"composeFiles,omitempty"`
			CreatedAt    time.Time                 `json:"createdAt"`
			Id           openapi_types.UUID        `json:"id"`
			Name         string                    `json:"name"`
			Slug         string                    `json:"slug"`
			Targets      *[]Target                 `json:"targets,omitempty"`
			UpdatedAt    time.Time                 `json:"updatedAt"`
		} `json:"environments,omitempty"`
		Id        openapi_types.UUID `json:"id"`
		Name      string             `json:"name"`
		Slug      string             `json:"slug"`
		UpdatedAt time.Time          `json:"updatedAt"`
	}
	JSON401 *struct {
		Error string `json:"error"`
	}
	JSON404 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrUpdateAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CreatedAt    time.Time `json:"createdAt"`
		Description  *string   `json:"description,omitempty"`
		Environments *[]struct {
			CreatedAt time.Time          `json:"createdAt"`
			Id        openapi_types.UUID `json:"id"`
			Name      string             `json:"name"`
			Slug      string             `json:"slug"`
			Targets   *[]Target          `json:"targets,omitempty"`
			UpdatedAt time.Time          `json:"updatedAt"`
		} `json:"environments,omitempty"`
		Id           openapi_types.UUID `json:"id"`
		Name         string             `json:"name"`
		Organization *Organization      `json:"organization,omitempty"`
		Slug         string             `json:"slug"`
		UpdatedAt    time.Time          `json:"updatedAt"`
	}
	JSON400 *ZodError
	JSON401 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateOrUpdateAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrUpdateAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrUpdateEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		App       *App               `json:"app,omitempty"`
		CreatedAt time.Time          `json:"createdAt"`
		Id        openapi_types.UUID `json:"id"`
		Name      string             `json:"name"`
		Slug      string             `json:"slug"`
		Targets   *[]Target          `json:"targets,omitempty"`
		UpdatedAt time.Time          `json:"updatedAt"`
	}
	JSON400 *ZodError
	JSON401 *struct {
		Error string `json:"error"`
	}
	JSON404 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateOrUpdateEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrUpdateEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEnvironmentComposeFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Compose       map[string]interface{} `json:"compose"`
		CreatedAt     time.Time              `json:"createdAt"`
		Environment   *Environment           `json:"environment,omitempty"`
		EnvironmentId openapi_types.UUID     `json:"environmentId"`
		Id            openapi_types.UUID     `json:"id"`
		RawCompose    string                 `json:"rawCompose"`
		UpdatedAt     time.Time              `json:"updatedAt"`
		Version       string                 `json:"version"`
	}
	JSON400 *ZodError
	JSON401 *struct {
		Error string `json:"error"`
	}
	JSON404 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateEnvironmentComposeFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEnvironmentComposeFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1WhoamiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Key *struct {
			CreatedAt   *string              `json:"createdAt,omitempty"`
			Id          *openapi_types.UUID  `json:"id,omitempty"`
			Metadata    *map[string]string   `json:"metadata,omitempty"`
			Name        *string              `json:"name,omitempty"`
			Permissions *map[string][]string `json:"permissions,omitempty"`
			UpdatedAt   *string              `json:"updatedAt,omitempty"`
			UserId      *openapi_types.UUID  `json:"userId,omitempty"`
		} `json:"key,omitempty"`
		Organization *Organization `json:"organization,omitempty"`
		Session      *struct {
			CreatedAt *string             `json:"createdAt,omitempty"`
			Id        *openapi_types.UUID `json:"id,omitempty"`
			UpdatedAt *string             `json:"updatedAt,omitempty"`
			UserId    *openapi_types.UUID `json:"userId,omitempty"`
		} `json:"session,omitempty"`
	}
	JSON401 *struct {
		Error *string `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetApiV1WhoamiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1WhoamiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetDeploymentWithResponse request returning *GetDeploymentResponse
func (c *ClientWithResponses) GetDeploymentWithResponse(ctx context.Context, deploymentId string, reqEditors ...RequestEditorFn) (*GetDeploymentResponse, error) {
	rsp, err := c.GetDeployment(ctx, deploymentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeploymentResponse(rsp)
}

// GetDeploymentHealthWithResponse request returning *GetDeploymentHealthResponse
func (c *ClientWithResponses) GetDeploymentHealthWithResponse(ctx context.Context, deploymentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetDeploymentHealthResponse, error) {
	rsp, err := c.GetDeploymentHealth(ctx, deploymentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeploymentHealthResponse(rsp)
}

// DeployEnvironmentComposeFileWithResponse request returning *DeployEnvironmentComposeFileResponse
func (c *ClientWithResponses) DeployEnvironmentComposeFileWithResponse(ctx context.Context, composeFileId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeployEnvironmentComposeFileResponse, error) {
	rsp, err := c.DeployEnvironmentComposeFile(ctx, composeFileId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeployEnvironmentComposeFileResponse(rsp)
}

// GetAppWithResponse request returning *GetAppResponse
func (c *ClientWithResponses) GetAppWithResponse(ctx context.Context, orgSlug string, appSlug string, reqEditors ...RequestEditorFn) (*GetAppResponse, error) {
	rsp, err := c.GetApp(ctx, orgSlug, appSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAppResponse(rsp)
}

// CreateOrUpdateAppWithBodyWithResponse request with arbitrary body returning *CreateOrUpdateAppResponse
func (c *ClientWithResponses) CreateOrUpdateAppWithBodyWithResponse(ctx context.Context, orgSlug string, appSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrUpdateAppResponse, error) {
	rsp, err := c.CreateOrUpdateAppWithBody(ctx, orgSlug, appSlug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrUpdateAppResponse(rsp)
}

func (c *ClientWithResponses) CreateOrUpdateAppWithResponse(ctx context.Context, orgSlug string, appSlug string, body CreateOrUpdateAppJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrUpdateAppResponse, error) {
	rsp, err := c.CreateOrUpdateApp(ctx, orgSlug, appSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrUpdateAppResponse(rsp)
}

// CreateOrUpdateEnvironmentWithBodyWithResponse request with arbitrary body returning *CreateOrUpdateEnvironmentResponse
func (c *ClientWithResponses) CreateOrUpdateEnvironmentWithBodyWithResponse(ctx context.Context, orgSlug string, appSlug string, envSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrUpdateEnvironmentResponse, error) {
	rsp, err := c.CreateOrUpdateEnvironmentWithBody(ctx, orgSlug, appSlug, envSlug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrUpdateEnvironmentResponse(rsp)
}

func (c *ClientWithResponses) CreateOrUpdateEnvironmentWithResponse(ctx context.Context, orgSlug string, appSlug string, envSlug string, body CreateOrUpdateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrUpdateEnvironmentResponse, error) {
	rsp, err := c.CreateOrUpdateEnvironment(ctx, orgSlug, appSlug, envSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrUpdateEnvironmentResponse(rsp)
}

// CreateEnvironmentComposeFileWithBodyWithResponse request with arbitrary body returning *CreateEnvironmentComposeFileResponse
func (c *ClientWithResponses) CreateEnvironmentComposeFileWithBodyWithResponse(ctx context.Context, orgSlug string, appSlug string, envSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvironmentComposeFileResponse, error) {
	rsp, err := c.CreateEnvironmentComposeFileWithBody(ctx, orgSlug, appSlug, envSlug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnvironmentComposeFileResponse(rsp)
}

func (c *ClientWithResponses) CreateEnvironmentComposeFileWithResponse(ctx context.Context, orgSlug string, appSlug string, envSlug string, body CreateEnvironmentComposeFileJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEnvironmentComposeFileResponse, error) {
	rsp, err := c.CreateEnvironmentComposeFile(ctx, orgSlug, appSlug, envSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnvironmentComposeFileResponse(rsp)
}

// GetApiV1WhoamiWithResponse request returning *GetApiV1WhoamiResponse
func (c *ClientWithResponses) GetApiV1WhoamiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1WhoamiResponse, error) {
	rsp, err := c.GetApiV1Whoami(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1WhoamiResponse(rsp)
}

// ParseGetDeploymentResponse parses an HTTP response from a GetDeploymentWithResponse call
func ParseGetDeploymentResponse(rsp *http.Response) (*GetDeploymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeploymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AppId     openapi_types.UUID `json:"appId"`
			CreatedAt time.Time          `json:"createdAt"`
			Id        openapi_types.UUID `json:"id"`
			Logs      *[]struct {
				Log       string    `json:"log"`
				Stream    string    `json:"stream"`
				Timestamp time.Time `json:"timestamp"`
			} `json:"logs,omitempty"`
			Status    string             `json:"status"`
			UpdatedAt time.Time          `json:"updatedAt"`
			VersionId openapi_types.UUID `json:"versionId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ZodError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetDeploymentHealthResponse parses an HTTP response from a GetDeploymentHealthWithResponse call
func ParseGetDeploymentHealthResponse(rsp *http.Response) (*GetDeploymentHealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeploymentHealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			DeploymentId openapi_types.UUID `json:"deploymentId"`

			// Error Error message if health check failed
			Error  *string `json:"error,omitempty"`
			Health *struct {
				Events *[]struct {
					Count          *float32 `json:"count,omitempty"`
					FirstTimestamp *string  `json:"firstTimestamp,omitempty"`
					InvolvedObject *struct {
						Kind *string `json:"kind,omitempty"`
						Name *string `json:"name,omitempty"`
					} `json:"involvedObject,omitempty"`
					LastTimestamp *string `json:"lastTimestamp,omitempty"`
					Message       *string `json:"message,omitempty"`
					Reason        *string `json:"reason,omitempty"`
					Source        *string `json:"source,omitempty"`
					Type          *string `json:"type,omitempty"`
				} `json:"events,omitempty"`
				Helm *map[string]interface{} `json:"helm,omitempty"`
				Pods *[]struct {
					Age        *string `json:"age,omitempty"`
					Conditions *[]struct {
						LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
						Message            *string `json:"message,omitempty"`
						Reason             *string `json:"reason,omitempty"`
						Status             *string `json:"status,omitempty"`
						Type               *string `json:"type,omitempty"`
					} `json:"conditions,omitempty"`
					ContainerStatuses *[]struct {
						LastState    *map[string]interface{} `json:"lastState,omitempty"`
						Name         *string                 `json:"name,omitempty"`
						Ready        *bool                   `json:"ready,omitempty"`
						RestartCount *float32                `json:"restartCount,omitempty"`
						State        *map[string]interface{} `json:"state,omitempty"`
					} `json:"containerStatuses,omitempty"`
					Ip       *string  `json:"ip,omitempty"`
					Name     *string  `json:"name,omitempty"`
					Node     *string  `json:"node,omitempty"`
					Phase    *string  `json:"phase,omitempty"`
					Ready    *bool    `json:"ready,omitempty"`
					Restarts *float32 `json:"restarts,omitempty"`
				} `json:"pods,omitempty"`
				Resources *struct {
					Deployments *[]struct {
						Available  *float32 `json:"available,omitempty"`
						Conditions *[]struct {
							Message *string `json:"message,omitempty"`
							Reason  *string `json:"reason,omitempty"`
							Status  *string `json:"status,omitempty"`
							Type    *string `json:"type,omitempty"`
						} `json:"conditions,omitempty"`
						Desired *float32 `json:"desired,omitempty"`
						Name    *string  `json:"name,omitempty"`
						Ready   *float32 `json:"ready,omitempty"`
						Updated *float32 `json:"updated,omitempty"`
					} `json:"deployments,omitempty"`
					Ingresses *[]struct {
						Hosts *[]string `json:"hosts,omitempty"`
						Name  *string   `json:"name,omitempty"`
						Ready *bool     `json:"ready,omitempty"`
					} `json:"ingresses,omitempty"`
					Services *[]struct {
						ClusterIP *string `json:"clusterIP,omitempty"`
						Name      *string `json:"name,omitempty"`
						Ports     *[]struct {
							Port     *float32 `json:"port,omitempty"`
							Protocol *string  `json:"protocol,omitempty"`

							// TargetPort Port number or name that containers expose (can be numeric string like '8080' or named port like 'http')
							TargetPort *string `json:"targetPort,omitempty"`
						} `json:"ports,omitempty"`
						Type *string `json:"type,omitempty"`
					} `json:"services,omitempty"`
				} `json:"resources,omitempty"`
			} `json:"health,omitempty"`

			// HealthScore Health score from 0-100
			HealthScore     float32                      `json:"healthScore"`
			LastHealthCheck *time.Time                   `json:"lastHealthCheck,omitempty"`
			Status          GetDeploymentHealth200Status `json:"status"`

			// Summary Human-readable health summary
			Summary         string `json:"summary"`
			Troubleshooting *struct {
				HealthScore   *float32  `json:"healthScore,omitempty"`
				QuickCommands *[]string `json:"quickCommands,omitempty"`
				Suggestions   *[]string `json:"suggestions,omitempty"`
				Summary       *string   `json:"summary,omitempty"`
			} `json:"troubleshooting,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeployEnvironmentComposeFileResponse parses an HTTP response from a DeployEnvironmentComposeFileWithResponse call
func ParseDeployEnvironmentComposeFileResponse(rsp *http.Response) (*DeployEnvironmentComposeFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeployEnvironmentComposeFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Deployments []struct {
				// CreatedAt Creation timestamp
				CreatedAt *time.Time `json:"createdAt,omitempty"`

				// EnvironmentComposeFileId The compose file ID
				EnvironmentComposeFileId *openapi_types.UUID `json:"environmentComposeFileId,omitempty"`

				// Id The deployment ID
				Id *openapi_types.UUID `json:"id,omitempty"`

				// Status The deployment status
				Status *string `json:"status,omitempty"`

				// TargetId The target ID
				TargetId *openapi_types.UUID `json:"targetId,omitempty"`

				// UpdatedAt Last update timestamp
				UpdatedAt *time.Time `json:"updatedAt,omitempty"`
			} `json:"deployments"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ZodError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetAppResponse parses an HTTP response from a GetAppWithResponse call
func ParseGetAppResponse(rsp *http.Response) (*GetAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CreatedAt    time.Time `json:"createdAt"`
			Description  *string   `json:"description,omitempty"`
			Environments *[]struct {
				ComposeFiles *[]EnvironmentComposeFile `json:"composeFiles,omitempty"`
				CreatedAt    time.Time                 `json:"createdAt"`
				Id           openapi_types.UUID        `json:"id"`
				Name         string                    `json:"name"`
				Slug         string                    `json:"slug"`
				Targets      *[]Target                 `json:"targets,omitempty"`
				UpdatedAt    time.Time                 `json:"updatedAt"`
			} `json:"environments,omitempty"`
			Id        openapi_types.UUID `json:"id"`
			Name      string             `json:"name"`
			Slug      string             `json:"slug"`
			UpdatedAt time.Time          `json:"updatedAt"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateOrUpdateAppResponse parses an HTTP response from a CreateOrUpdateAppWithResponse call
func ParseCreateOrUpdateAppResponse(rsp *http.Response) (*CreateOrUpdateAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrUpdateAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CreatedAt    time.Time `json:"createdAt"`
			Description  *string   `json:"description,omitempty"`
			Environments *[]struct {
				CreatedAt time.Time          `json:"createdAt"`
				Id        openapi_types.UUID `json:"id"`
				Name      string             `json:"name"`
				Slug      string             `json:"slug"`
				Targets   *[]Target          `json:"targets,omitempty"`
				UpdatedAt time.Time          `json:"updatedAt"`
			} `json:"environments,omitempty"`
			Id           openapi_types.UUID `json:"id"`
			Name         string             `json:"name"`
			Organization *Organization      `json:"organization,omitempty"`
			Slug         string             `json:"slug"`
			UpdatedAt    time.Time          `json:"updatedAt"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ZodError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseCreateOrUpdateEnvironmentResponse parses an HTTP response from a CreateOrUpdateEnvironmentWithResponse call
func ParseCreateOrUpdateEnvironmentResponse(rsp *http.Response) (*CreateOrUpdateEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrUpdateEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			App       *App               `json:"app,omitempty"`
			CreatedAt time.Time          `json:"createdAt"`
			Id        openapi_types.UUID `json:"id"`
			Name      string             `json:"name"`
			Slug      string             `json:"slug"`
			Targets   *[]Target          `json:"targets,omitempty"`
			UpdatedAt time.Time          `json:"updatedAt"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ZodError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateEnvironmentComposeFileResponse parses an HTTP response from a CreateEnvironmentComposeFileWithResponse call
func ParseCreateEnvironmentComposeFileResponse(rsp *http.Response) (*CreateEnvironmentComposeFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateEnvironmentComposeFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Compose       map[string]interface{} `json:"compose"`
			CreatedAt     time.Time              `json:"createdAt"`
			Environment   *Environment           `json:"environment,omitempty"`
			EnvironmentId openapi_types.UUID     `json:"environmentId"`
			Id            openapi_types.UUID     `json:"id"`
			RawCompose    string                 `json:"rawCompose"`
			UpdatedAt     time.Time              `json:"updatedAt"`
			Version       string                 `json:"version"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ZodError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetApiV1WhoamiResponse parses an HTTP response from a GetApiV1WhoamiWithResponse call
func ParseGetApiV1WhoamiResponse(rsp *http.Response) (*GetApiV1WhoamiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1WhoamiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Key *struct {
				CreatedAt   *string              `json:"createdAt,omitempty"`
				Id          *openapi_types.UUID  `json:"id,omitempty"`
				Metadata    *map[string]string   `json:"metadata,omitempty"`
				Name        *string              `json:"name,omitempty"`
				Permissions *map[string][]string `json:"permissions,omitempty"`
				UpdatedAt   *string              `json:"updatedAt,omitempty"`
				UserId      *openapi_types.UUID  `json:"userId,omitempty"`
			} `json:"key,omitempty"`
			Organization *Organization `json:"organization,omitempty"`
			Session      *struct {
				CreatedAt *string             `json:"createdAt,omitempty"`
				Id        *openapi_types.UUID `json:"id,omitempty"`
				UpdatedAt *string             `json:"updatedAt,omitempty"`
				UserId    *openapi_types.UUID `json:"userId,omitempty"`
			} `json:"session,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}
